	.data
msg1:	.asciiz "Introduzca un n√∫mero: "
msg2:	.asciiz "\n"

	.text
	
main1:

	la $a0, msg1
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	
	move $a0, $v0
	li $a1, 0
	
	jal create
	
	move $s0, $v0
	
main2:

	la $a0, msg1
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	
	beqz $v0, cero
	
	move $a0, $v0
	move $a1, $s0
	
	jal insert_in_order
	
	bnez $v0, act

	b main2
	
act:

	move $s0, $v0
	b main2
	
cero:

	move $a0, $s0
	
	jal print 
	
	li $v0, 10
	syscall
	
	
create:

	subu $sp, $sp, 32
	sw $ra, 20($sp)
	sw $fp, 16($sp)
	addiu $fp, $sp, 24
	
	sw $a0, 0($fp)  #val
	sw $a1, 4($fp) #dir

	
	lw $v0, 4($fp)
	beqz $v0, init
	
	li $a0, 8
	li $v0, 9
	syscall
	
	lw $t0, 0($fp)
	lw $t1, 4($fp)
	
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
	b return_create
	
init:
	li $a0,8
	li $v0,9
	syscall
	
	lw $t0, 0($fp)
	li $t1, 0
	
	sw $t0, 0($v0)
	sw $t1, 4($v0)
	
return_create:
	lw $ra, 20($sp)
	lw $fp, 16($sp)
	addiu $sp,$sp,32
	jr $ra
	
insert_in_order:
	subu $sp, $sp, 32
	sw $ra, 20($sp)
	sw $fp, 16($sp)
	addiu $fp, $sp, 24
	
	sw $a0, 0($fp) #val
	sw $a1, 4($fp) #dir
	
	lw $v0, 4($a1) #comprobamos que no es el final de la lista 
	
	beqz $v0, f1
	
	lw $v0, 0($v0) #comparo el valor del nodo siguiente
	move $v1, $a0 #valor actual
	
	blt $v1, $v0, order #si el valor introduc es menor que el del nodo sig
	
	lw $a1, 4($a1)
	
f2:
	
	jal create
	
	b return_insert
	
	#lw $a1, 4($a1)
	
	#b insert_in_order
	
f1:
	lw $v0, 0($a1)
	
	blt $a0, $v0, f2
	

order:

	move $t0, $a1 #nodo anterior
	lw $t1,4($t0)
	
	bgt $a0,$t1, aux
	
	lw $a1, 4($a1)
	
	b insert_in_order
	
aux:

	jal create

	
return_insert:

	lw $ra, 20($sp)
	lw $fp, 16($sp)
	addiu $sp, $sp, 32
	jr $ra
	
print:

	subu $sp, $sp, 32
	sw $ra, 20($sp)
	sw $fp, 16($sp)
	addiu $fp, $sp, 28
	sw $a0, 0($fp)

	move $v0, $a0
	bnez $v0, print_recurse

	b return_print

print_recurse:

	lw $a0, 4($a0)
	jal print

	lw $a0, 0($fp)
	lw $a0, 0($a0)
	li $v0, 1
	syscall
	la $a0, msg2
	li $v0, 4
	syscall

return_print:
	lw $ra, 20($sp)
	lw $fp, 16($sp)
	addiu $sp, $sp, 32
	jr $ra

